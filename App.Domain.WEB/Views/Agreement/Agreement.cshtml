@using System.Globalization
@model PaginatedList<AgreementViewModel>
@{
    ViewData["Title"] = "Agreements";
    int i = 0;
}

@*<input class="form-control my-2" type="text" id="search" placeholder="Search" />*@

<div class="container row">
    <div class="col-8">
        <form asp-action="Agreement" method="get">
            <div class="form-row my-2">
               @* <div class="form-col mx-2">
                    <select id="itemSelect" class="form-control" name="itemNameFilter" multiple>
                        @foreach (var item in ViewData["AllItems"] as List<ItemViewModel>)
                        {
                            @if ((ViewData["ItemNameFilter"] as string[]).Contains(item.Name))
                            {
                                <option value="@item.Name" selected>@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Name">@item.Name</option>
                            }
                        }
                    </select>
                </div>*@

                <div class="form-col mr-2">
                    <select id="catSelect" class="form-control" name="catFilter" multiple>
                        @foreach (var cat in ViewData["AllCats"] as List<CategoryViewModel>)
                        {
                            @if ((ViewData["CatFilter"] as string[]).Contains(cat.Name))
                            {
                                <option value="@cat.Name" selected>@cat.Name</option>
                            }
                            else
                            {
                                <option value="@cat.Name">@cat.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-col mr-2">
                    <input id="pageSize" class="form-control" type="number" name="pageSize" placeholder="Page Size" min="5" value="@Model.PageSize"/>
                </div>
            </div>

            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="buyUsr" class="form-control" type="text" name="CustomerUsrNameFilter" placeholder="Customer User Name" value="@ViewData["CustUserFilter"]"/>
                </div>

                <div class="form-col mr-2">
                    <input id="sellUsr" class="form-control" type="text" name="ExecUsrNameFilter" placeholder="Contractor User Name" value="@ViewData["ContrUserFilter"]"/>
                </div>
            </div>

            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="MinValue" name="MinValue" type="number" step="0.01" min=0.01 value="@ViewData["MinVal"]" class="form-control" placeholder="Min Item Cost"/>
                </div>

                <div class="form-col mr-2">
                    <input id="MaxValue" name="MaxValue" type="number" step="0.01" min=0.01 value="@ViewData["MaxVal"]" class="form-control" placeholder="Max Item Cost"/>
                </div>
            </div>


            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="StartDate" name="StartDate" type="date" value="@ViewData["StartDate"]" class="form-control" placeholder="From ConclusionDate"/>
                </div>

                <div class="form-col mr-2">
                    <input id="EndDate" name="EndDate" type="date" value="@ViewData["End ConclusionDate"]" class="form-control" placeholder="To ConclusionDate"/>
                </div>
            </div>

           
            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input type="submit" value="Search" class="btn btn-outline-dark"/>
                </div>
                <div class="form-col mx-2">
                    <a asp-action="Agreement" class="btn btn-outline-danger">Clear filters</a>
                </div>
            </div>
        </form>
    </div>

    <div class="col-4">
        <div class="row py-5 lead">Total Selected Cost: @ViewData["TotalValue"]</div>
        <div class="row lead">Total Selected Amount: @ViewData["TotalAmount"]</div>
    </div>
</div>


<table id="table" class="text-center table table-striped">
    <thead class="thead-light">
    <th scope="col">
        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["IdSortParam"]"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-contrUsrNameFilter="@ViewData["ContrUserFilter"]"
           asp-route-custUsrNameFilter="@ViewData["CustUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-pageSize="@Model.PageSize">
            #
        </a>
    </th>

    <th scope="col">
        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["AgrCatSortParam"]"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-contrUsrNameFilter="@ViewData["ContrUserFilter"]"
           asp-route-custUsrNameFilter="@ViewData["CustUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-pageSize="@Model.PageSize">
            Categories
        </a>
    </th>
    
    <th scope="col">
        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["CostSortParam"]"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-contrUsrNameFilter="@ViewData["ContrUserFilter"]"
           asp-route-custUsrNameFilter="@ViewData["CustUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-pageSize="@Model.PageSize">
            Cost
        </a>
    </th>
    <th scope="col">
        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["CustomerUserSortParam"]"
           
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-contrUsrNameFilter="@ViewData["ContrUserFilter"]"
           asp-route-custUsrNameFilter="@ViewData["CustUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-pageSize="@Model.PageSize">
            Buying User
        </a>
    </th>
    <th scope="col">
        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["ContractorUserSortParam"]"
           
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-contrUsrNameFilter="@ViewData["ContrUserFilter"]"
           asp-route-custUsrNameFilter="@ViewData["CustUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-pageSize="@Model.PageSize">
            Selling User
        </a>
    </th>
    <th scope="col">
        <a asp-action="Agreement"    
           asp-route-sortOrder="@ViewData["DateSortParam"]"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-contrUsrNameFilter="@ViewData["ContrUserFilter"]"
           asp-route-custUsrNameFilter="@ViewData["CustUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-pageSize="@Model.PageSize">
            Conclusion Date
        </a>
    </th>

    <th scope="col">Action</th>
    </thead>

    <tbody>
    @foreach (var agreement in Model)
    {
        i++;
        <tr>
            <td>@i</td>
            <td>@String.Join(", ", agreement.Categories?.Select(i => i.Name).ToArray()??new String[0])</td>
            <td>@agreement.Cost</td>
            <td>@(agreement.CustomerUser?.Name + " (" + agreement.CustomerUser?.UserType.ToString() + ")")</td>
            <td>@(agreement.ContractorUser?.Name + " (" + agreement.ContractorUser?.UserType.ToString() + ")")</td>
            <td>@agreement.ConclusionDate.ToString("d", CultureInfo.CreateSpecificCulture("ru-RU"))</td>
            <td>
                <button type="button" class="fill-modal btn btn-outline-primary" data-toggle="modal" value="@agreement.Id" data-target="#addingModal">
                    Edit
                </button>

                <a href="~/Agreement/RemoveAgreement/?id=@agreement.Id" class="btn btn-outline-danger">
                    Remove
                </a>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="float-right">
    <button type="button" class="clear-modal btn btn-primary" data-toggle="modal" data-target="#addingModal">
        Add New Agreement
    </button>

    <a asp-action="Download"
     
       asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
       asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
       asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
       asp-route-MinAmount="@ViewData["MinAmount"]"
       asp-route-MaxAmount="@ViewData["MaxAmount"]"
       asp-route-MinCost="@ViewData["MinVal"]"
       asp-route-MaxCost="@ViewData["MaxVal"]"
       asp-route-StartConclusionDate="@ViewData["StartDate"]"
       asp-route-EndConclusionDate="@ViewData["EndDate"]"
       class="btn btn-outline-primary">
        Download As ExcelFile
    </a>
</div>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<div class="container">
    <div class="row">
        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["SortOrder"]"
           asp-route-pageIndex="@(Model.PageIndex - 1)"
 
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageSize="@Model.PageSize"
           class="btn btn-outline-dark @prevDisabled">
            Previous
        </a>

        <div class="border border-dark rounded input text-justify px-2 mx-2">
            <span class="align-middle">Page Index: @Model.PageIndex</span>
        </div>

        <a asp-action="Agreement"
           asp-route-sortOrder="@ViewData["SortOrder"]"
           asp-route-pageIndex="@(Model.PageIndex + 1)"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-MinAmount="@ViewData["MinAmount"]"
           asp-route-MaxAmount="@ViewData["MaxAmount"]"
           asp-route-MinCost="@ViewData["MinVal"]"
           asp-route-MaxCost="@ViewData["MaxVal"]"
           asp-route-StartConclusionDate="@ViewData["StartDate"]"
           asp-route-EndConclusionDate="@ViewData["EndDate"]"
           asp-route-pageSize="@Model.PageSize"
           class="btn btn-outline-dark @nextDisabled">
            Next
        </a>
    </div>
</div>


<div class="modal fade" id="addingModal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <form class="needs-validation" method="post" novalidate>
                <div class="modal-body">
              
                    <label for="Value" class="col-form-label float-left">Cost:</label>
                    <input id="Value" name="Cost" type="number" step="0.01" min=0.01 value="0.01" class="form-control" placeholder="Item Count" required/>
                    <div class="float-left invalid-feedback">Please provide a cost.</div>

                    <label for="BuyingUser" class="form-label">Customer User:</label>
                    <select id="BuyingUser" name="buyingUser" class="form-control" required>
                        @foreach (var user in ViewData["AllUsers"] as IEnumerable<UserViewModel>)
                        {
                            <option value="@user.Id">@(user.Name + " (" + user.UserType + ")")</option>
                        }
                    </select>

                    <label for="SellingUser" class="form-label">Contractor User:</label>
                    <select id="SellingUser" name="sellingUser" class="form-control" required>
                        @foreach (var user in ViewData["AllUsers"] as IEnumerable<UserViewModel>)
                        {
                            <option value="@user.Id">@(user.Name + " (" + user.UserType + ")")</option>
                        }
                    </select>

                    
                    <label for="Cats" class="form-label">Categories:</label>
                    <select id="Cats" name="categories" class="form-control"  required>
                         @foreach (var cat in ViewData["AllCats"] as List<CategoryViewModel>)
                         { 
                             <option value="@cat.Name">@cat.Name</option>
                         }
                    </select>
                    <div class="float-left invalid-feedback">
                        Please provide some categories.
                    </div>
                    
                    
                    <label for="SellingDate" class="form-label">ConclusionDate:</label>
                    <input id="SellingDate" name="ConclusionDate" class="form-control" type="date" required>

                </div>

                <div class="modal-footer form-check">
                    <button type="submit" id="Id" class="btn btn-primary" name="Id">Edit Agreement</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>

            </form>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        $('#itemSelect').select2({
            multiple: true,
            theme: 'bootstrap4',
            placeholder: "Select Agreements"
        });

        $('#catSelect').select2({
            multiple: true,
            theme: 'bootstrap4',
            placeholder: "Select Categories"
        });
        
        $('#categorySelect').select2({
         multiple: true,
                                    theme: 'bootstrap4',
                                    placeholder: "Select Categories"
                                });
    });


    $('.fill-modal').click(function () {
        
        
                
        var $row = $(this).closest("tr");
        $('#Id').val(parseInt($(this).val()));
        $('#ItemCount').val($row.children("td:nth-child(4)").text().trim());
        $('#Cost').val($row.children("td:nth-child(5)").text().trim());
        
        const dateArr = $row.children("td:nth-child(8)").text().split('.')
        $('#ConclusionDate').val(dateArr[2] + '-' + dateArr[1] + '-' + dateArr[0])

        $("#agreementItem option:contains('" + $row.children('td:nth-child(2)').text().trim() + "')")
            .filter(function (i) {
                return $(this).text() === $row.children('td:nth-child(2)').text().trim();
            })
            .attr("selected", true)

        $("#CustomerUser option:contains('" + $row.children("td:nth-child(6)").text().trim() + "')")
            .filter(function (i) {
                return $(this).text() === $row.children("td:nth-child(6)").text().trim();
            })
            .attr("selected", true)

        $("#ContractorUser option:contains('" + $row.children("td:nth-child(7)").text().trim() + "')")
            .filter(function (i) {
                return $(this).text() === $row.children("td:nth-child(7)").text().trim();
            })
            .attr("selected", true)
    });

    $('.clear-modal').click(function () {
        $('#agreementItem').val(null);
        $('#Id').val(null);
        $('#ItemCount').val(1);
        $('#Cost').val(0.01);
        $('#CustomerUser').val(null);
        $('#ContractorUser').val(null);
        $('#ConclusionDate').val(null);
    });

    $("#search").keyup(function () {
        var searchText = $(this).val().toLowerCase();
        // Show only matching TR, hide rest of them
        $.each($("#table tbody tr"), function () {
            if ($(this).text().toLowerCase().indexOf(searchText) === -1)
                $(this).hide();
            else
                $(this).show();
        });
    });

    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>